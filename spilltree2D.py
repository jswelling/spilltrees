# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
This extension module provides support for the Hybrid Spill-Tree
nearest neighbor finding algorithm as described in 'An Investigation
of Practical Approximate Nearest Neighbor Algorithms' by Liu, Moore,
Gray and Yang.  The algorithm can be made exact (at some cost in
running time) by setting the constructor parameter tau equal to 0.0.
The source code is based on a C++ template which can provide trees
of arbitrary dimensionality.  This extension was configured to
use float precision internally.
"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spilltree2D', [dirname(__file__)])
        except ImportError:
            import _spilltree2D
            return _spilltree2D
        if fp is not None:
            try:
                _mod = imp.load_module('_spilltree2D', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _spilltree2D = swig_import_helper()
    del swig_import_helper
else:
    import _spilltree2D
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_spilltree2D.PRECSTRING_swigconstant(_spilltree2D)
PRECSTRING = _spilltree2D.PRECSTRING
class _HookHolder(_object):
    """Proxy of C++ _HookHolder class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _HookHolder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _HookHolder, name)
    __repr__ = _swig_repr

    def __init__(self, obj, loc):
        """__init__(_HookHolder self, PyObject * obj, FloatType [2] loc) -> _HookHolder"""
        this = _spilltree2D.new__HookHolder(obj, loc)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getHook(self):
        """getHook(_HookHolder self) -> PyObject *"""
        return _spilltree2D._HookHolder_getHook(self)

    __swig_destroy__ = _spilltree2D.delete__HookHolder
    __del__ = lambda self: None
_HookHolder_swigregister = _spilltree2D._HookHolder_swigregister
_HookHolder_swigregister(_HookHolder)

class _NeighborInfo(_object):
    """Proxy of C++ JWrapNeighborInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NeighborInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NeighborInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["obj"] = _spilltree2D._NeighborInfo_obj_set
    __swig_getmethods__["obj"] = _spilltree2D._NeighborInfo_obj_get
    if _newclass:
        obj = _swig_property(_spilltree2D._NeighborInfo_obj_get, _spilltree2D._NeighborInfo_obj_set)
    __swig_setmethods__["sepsqr"] = _spilltree2D._NeighborInfo_sepsqr_set
    __swig_getmethods__["sepsqr"] = _spilltree2D._NeighborInfo_sepsqr_get
    if _newclass:
        sepsqr = _swig_property(_spilltree2D._NeighborInfo_sepsqr_get, _spilltree2D._NeighborInfo_sepsqr_set)

    def __init__(self, obj_in, sepsqr_in):
        """__init__(JWrapNeighborInfo self, PyObject * obj_in, FloatType sepsqr_in) -> _NeighborInfo"""
        this = _spilltree2D.new__NeighborInfo(obj_in, sepsqr_in)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _spilltree2D.delete__NeighborInfo
    __del__ = lambda self: None
_NeighborInfo_swigregister = _spilltree2D._NeighborInfo_swigregister
_NeighborInfo_swigregister(_NeighborInfo)

class SpTree(_object):
    """Proxy of C++ JWrapSpTree class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpTree, name)
    __repr__ = _swig_repr

    def __init__(self, input, tau=0.3, rho=0.7):
        """
        SpTree([ObjWithLoc, ObjWithLoc, ...], tau=0.3, rho=0.7) -> SpTree
        SpTree([ObjWithLoc, ObjWithLoc, ...], tau=0.3, rho=0.7) -> SpTree
        SpTree([ObjWithLoc, ObjWithLoc, ...], tau=0.3, rho=0.7) -> SpTree


        The objects in the input list must be instances of classes having a
        method:

          thisObjWithLoc.getLoc() -> [FloatType, FloatType... ]

        where the coordinate list length matches the dimensionality.  The
        parameters tau and rho have the meanings described in the paper
        by Liu, Moore, Gray and Yang.  Set tau=0.0 for exact neighbors.

        """

        if len(args)<1 or len(args)>3:
            raise TypeError,"new_JWrapSpTree() takes 1 to 3 arguments"
        hookList= []
        for a in args[0]:
            new_HookHolder= _HookHolder(a,a.getLoc())
            hookList.append(new_HookHolder)
        if len(args)==1: args= tuple([hookList])
        elif len(args)==2: args= (hookList,args[1])
        else: args= (hookList,args[1],args[2])


        this = _spilltree2D.new_SpTree(input, tau, rho)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

        self.hookList= hookList



    __swig_destroy__ = _spilltree2D.delete_SpTree
    def __del__(self):
        """__del__(JWrapSpTree self)"""

        self.hookList= None


        pass


    def getNDim(self):
        """
        getNDim(SpTree self) -> int

        Returns the dimensionality of the tree
        """
        return _spilltree2D.SpTree_getNDim(self)


    def dump(self, ofile):
        """
        dump(SpTree self, FILE * ofile)

        Writes a summary of the tree structure to the given file
        """
        return _spilltree2D.SpTree_dump(self, ofile)


    def findApproxNearest(self, p):
        """
        findApproxNearest(ObjWithLoc) -> (neighborObjWithLoc, sepsqr)

        sepsqr is the square of the separation distance
        """

        if len(args)!=2:
            raise TypeError,"JWrapSpTree::findApproxNearest takes exactly 1 argument"
        a1,a2= args;
        args= (a1,_HookHolder(a2,a2.getLoc()))


        return _spilltree2D.SpTree_findApproxNearest(self, p)


    def findApproxKNearest(self, neighbors_out, p):
        """
        findApproxKNearest(ObjWithLoc) -> [(obj,sepsqr),(obj,sepsqr),...]

        The entries in the output list are in order of increasing sepsqr
        """

        if len(args)!=3:
            raise TypeError,"JWrapSpTree.findApproxKNearest takes exactly 2 arguments"
        a1,a2,a3= args;
        args= (a1,a2,_HookHolder(a3,a3.getLoc()))


        return _spilltree2D.SpTree_findApproxKNearest(self, neighbors_out, p)

SpTree_swigregister = _spilltree2D.SpTree_swigregister
SpTree_swigregister(SpTree)

# This file is compatible with both classic and new-style classes.


